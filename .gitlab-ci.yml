stages:
  - format
  - test
  - pre-release
  - release

# snippits

.install_cmake: &install_cmake
  - apt-get update && apt-get install -y cmake

.install_gh_cli_centos: &install_gh_cli_centos |
  type -p yum-config-manager >/dev/null || sudo yum install yum-utils
  yum-config-manager --add-repo https://cli.github.com/packages/rpm/gh-cli.repo
  yum install gh -y

.install_gh_cli: &install_gh_cli |
  type -p curl >/dev/null || (apt update && apt install curl -y)
  curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg \
  && chmod go+r /usr/share/keyrings/githubcli-archive-keyring.gpg \
  && echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | tee /etc/apt/sources.list.d/github-cli.list > /dev/null \
  && apt update \
  && apt install gh -y

.setup_github_release: &setup_gh_release |
  echo ${MODKIT_BOT_GH_KEY} | gh auth login --with-token
  gh auth setup-git
  echo "set up gitHub"
  git clone https://github.com/epi2me-labs/github_release.git
  pushd github_release
  pip install -r requirements.txt
  python3 setup.py install
  echo "setup github_release"
  popd
  echo "$(pwd)"

.setup_gh_push: &setup_gh_push
  - apt-get update -qq && apt-get install -y -qq git git-lfs python3-dev python3-pip
  - *setup_gh_release

.check_changelog: &check_changelog
  - TAGVER=${CI_COMMIT_TAG}
  - MATCHES=$(grep -c "## \[${TAGVER}\]" CHANGELOG.md || exit 0)
  - >
    if [[ "${MATCHES}" != "1" ]]; then
      echo "[check_tag_version] Expected one match to '${CI_COMMIT_TAG}' in CHANGELOG, found ${MATCHES}"
      exit 1
    else
      echo "[check_tag_version] Found CHANGELOG.md entry for tag"
    fi
  - echo "Finished version check"

.check_tag_version: &check_tag_version |
  CRATE_VER="v"$(cargo r -- --version | cut -f 2 -d ' ')
  TAGVER=${CI_COMMIT_TAG}
    if [[ "${CRATE_VER}" != "${TAGVER}" ]]; then
        echo "[check_tag_version] Mismatching TAG and PACKAGE versions:"
        echo " -     TAG:'$TAGVER'"
        echo " - PACKAGE:'$CRATE_VER'"
        exit 1
    else
        echo "[check_tag_version] TAG and CRATE versions agree: '${CRATE_VER}'"
    fi

# build images
.rust_image: &rust_image
  # 1.77.2 (https://hub.docker.com/layers/library/rust/1.77.2/images/sha256-6361801bd55ffec96b953437f1083a8d730320b0809292d7d84425ff5f3223a3)
  image: rust@sha256:da23629cc6826f0c395c8697994cdce0b5ac6850a695c448a101c3cc9cd6a59b

.ubuntu_1604_image: &ub16_image
  image: ubuntu@sha256:1f1a2d56de1d604801a9671f301190704c25d604a416f59e03c04f5c6ffee0d6

.centos7_image: &centos7_image
  image: centos@sha256:be65f488b7764ad3638f236b7b515b3678369a5124c47b8d32916d6487418ea4


# rules/stages
format:
  <<: *rust_image
  stage: format
  script:
    - rustup install nightly-2023-12-19
    - rustup component add rustfmt --toolchain nightly-2023-12-19-x86_64-unknown-linux-gnu
    - cargo +nightly-2023-12-19 fmt --check

test:
  <<: *rust_image
  stage: test
  script:
    - *install_cmake
    - cargo test

.install_rust_1604: &install_rust_1604 |
  apt-get update && apt-get install -y curl build-essential cmake apt-transport-https
  curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
  source $HOME/.cargo/env

.install_rust_centos7: &install_rust_centos7 |
  curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
  source $HOME/.cargo/env

prerelease_checks:
  stage: pre-release
  <<: *rust_image
  rules:
    - if: '$CI_COMMIT_TAG =~ /^v[[:digit:]]+\.[[:digit:]]+\.[[:digit:]]+$/'
  script:
    - *install_cmake
    - *check_tag_version
    - *check_changelog


manual_build_modkit_linux:
  <<: *rust_image
  when: manual
  script:
    - *install_cmake
    - cargo build --release
  artifacts:
    paths:
      - target/release/modkit


.build_with_cmake_around: &build_with_cmake_around |
  wget https://github.com/Kitware/CMake/releases/download/v3.26.3/cmake-3.26.3-linux-x86_64.tar.gz
  tar zxvf cmake-3.26.3-linux-x86_64.tar.gz
  ls cmake-3.26.3-linux-x86_64/bin
  export PATH="$(pwd)/cmake-3.26.3-linux-x86_64/bin:$PATH"
  cargo build --release
  

# TODO change `dist` directory to modkit_v{CRATE_VERSION}_{GIT_SHA}
.pack_up_dist: &pack_up_dist |
  CRATE_VER="v"$(cargo r -- --version | cut -f 2 -d ' ')
  short_sha=${CI_COMMIT_SHA:0:7}
  echo "> version, ${CRATE_VER}, sha ${short_sha}"
  dist_dir=dist_modkit_${CRATE_VER}_${short_sha}
  ls target/release/modkit
  mkdir ${dist_dir}

  cp README.md ${dist_dir}
  cp LICENCE.txt ${dist_dir}
  cp target/release/modkit ${dist_dir}
  cp -r docs ${dist_dir}
  echo "contents if distribution $(ls ${dist_dir})"
  tar -cvzf modkit_u16_x86_64.tar.gz ${dist_dir}
  ls modkit_u16_x86_64.tar.gz

manual_build_modkit_u16:
  <<: *ub16_image
  when: manual
  script:
    - *install_rust_1604
    - cargo build --release
    - ls -al
    - *pack_up_dist
  artifacts:
    paths:
      - modkit_u16_x86_64.tar.gz

# manual_build_modkit_linux_centos:
#   <<: *centos7_image
#   when: manual
#   script:
#     - yum groupinstall 'Development Tools' -y
#     - yum install perl-IPC-Cmd -y
#     - yum install wget -y
#     - *install_rust_centos7
#     - *build_with_cmake_around
#     - *pack_up_dist_centos
#   artifacts:
#     paths:
#       - modkit_centos7_x86_64.tar.gz

deploy_linux_artefact:
  <<: *rust_image
  stage: release
  rules:
    - if: '$CI_COMMIT_TAG =~ /^v[[:digit:]]+\.[[:digit:]]+\.[[:digit:]]+$/'
  script:
    - *install_gh_cli
    - *setup_gh_push
    - cargo build --release
    - echo "ready to push $(ls target/release/modkit)"
    - mkdir dist
    - cp *.md dist/
    - cp LICENCE.txt dist/
    - cp target/release/modkit dist/
    - echo "contents if distribution $(ls dist/)"
    - tar -cvzf modkit_deb11_$(arch).tar.gz dist/
    - ls modkit_$(arch).tar.gz
    - echo "pushing bits"
    - github_release modkit ${CI_COMMIT_TAG} CHANGELOG.md ${MODKIT_BOT_GH_KEY} --artifacts modkit_$(arch).tar.gz
    - echo "finished"


deploy_source_code:
  <<: *rust_image
  stage: release
  rules:
    - if: '$CI_COMMIT_TAG =~ /^v[[:digit:]]+\.[[:digit:]]+\.[[:digit:]]+$/'
  script:
    - *install_gh_cli
    - *setup_gh_push
    - git remote add github https://github.com/nanoporetech/modkit.git
    - git push github master -f


build_modkit_docs:
  <<: *rust_image
  stage: test
  when: manual
  script:
    - cargo install mdbook --no-default-features --features search --vers "^0.4" --locked
    - cd book
    - mdbook build -d ../docs
  artifacts:
    paths:
      - docs
